pipeline {
    agent any

    environment {
        REMOTE_URL = 'git@github.com:LIN810116/my-test-project.git'
        CREDENTIAL_ID = 'my-test-project'
        BRANCH = 'main'
        USER_NAME = 'clin864'
        USER_EMAIL = 'clin864@aucklanduni.ac.nz'
        TEST_MODULE = 'tests/test_main.py'
        SOURCE_DIR = './docs/source'
        BUILD_DIR = './docs/build'
    }

    stages {
        stage('Setup') {
            steps{
                echo "Cloning GitHub repository..."
                git branch: "${BRANCH}", credentialsId: "${CREDENTIAL_ID}", url: "${REMOTE_URL}"
                echo "Creating virtual environment"
                sh '''
                    python --version
                    python -m venv venv
                '''
            }
        }

        stage('Install Dependencies') {
            when {
                expression { return fileExists ('requirements.txt') }
            }
            steps {
                echo "Installing dependencies..."
                sh '''
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage ('Test'){
            when {
                expression { return fileExists (TEST_MODULE) }
            }
            steps {
                echo "Running tests"
                sh '''
                    . venv/bin/activate
                    python -m unittest ${TEST_MODULE}
                '''
            }
        }

        stage('Build docs') {
            steps {
                echo "Building"
                echo "${WORKSPACE}"
                sh "${WORKSPACE}/venv/bin/sphinx-build -b html ${SOURCE_DIR} ${BUILD_DIR}"
            }
        }

        stage("Deploy Docs") {
            steps {
                echo "Deploying to GitHub pages"
                sh '''
                    git config --global user.email ${USER_EMAIL}
                    git config --global user.name ${USER_NAME}
                '''

                sh 'npm install -g --silent gh-pages@2.1.1'
                sh 'touch ${BUILD_DIR}/.nojekyll'
                sshagent(credentials: ["${CREDENTIAL_ID}"]) {
                    sh '''
                        gh-pages --dotfiles --message '[skip ci] Updates' --dist ${BUILD_DIR}
                    '''
                }
            }
        }

    }
}
